/*
 * Simple MEC Discovery API
 *
 * # Find your nearest MEC platform --- Network operators will typically have multiple MEC sites in a given territory. Connecting your application to a server on the closest MEC platform means the lowest latency - however, the physical location of a user is not an accurate match to the closest MEC site, due to the way operator networks are configured. This API returns the MEC platforms with the _shortest network path_ to the client making the request, and hence the lowest propagation delay. * If you have a server instance deployed there, connect to it to gain the lowest latency * Or if not, you may wish to deploy an instance there using the APIs of the cloud provider supporting that zone.    This API is intended to be called by a client application hosted on a UE attached to the operator network. _Note that the API parameters have been listed in this 'simple API' to align with the full API, but are optional and may not be supported by the API server_ ---
 *
 * API version: 0.8.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

func Test1(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	fmt.Fprint(w,"Hello Test1")
	log.Println("Hello Test1 log")

	w.WriteHeader(http.StatusOK)
}

func Test2(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	fmt.Fprint(w,"Hello Test2")
	log.Println("Hello Test2 log")

	w.WriteHeader(http.StatusOK)
}



func TestRequest(w http.ResponseWriter, r *http.Request){
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	vars := mux.Vars(r)
	value := vars["value"]

	value += "-[server received]"
	fmt.Fprint(w, value+"\n")
	log.Println(value+"\n")

	//log.Println("server received data from client : " + value)

	value += "-[server send]"
	fmt.Fprint(w, value)
	log.Println(value)
}